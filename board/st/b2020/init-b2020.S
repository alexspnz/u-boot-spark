/*
 * The poke table is a series of long words, in the format
 *
 *	opcode, address, operand, ...
 *
 * An opcode of 0 marks the table end
 */


#include <config.h>
#include <stm/socregs.h>
#if defined(CONFIG_ST40)
#  include "../../../arch/st40/cpu/init_ram.S"
#elif defined(CONFIG_ARM)
#  include "../../../arch/arm/cpu/armv7/stm/init_ram.S"
#endif


	.section .data.init, "a"

	.balign 32

__memory_setup_table:

	/*
	 * include the appropriate set of "GDB pokes", (usually) generated
	 * using the "romgen" utility, from a known good target-pack.
	 *
	 * In general, it is recommended to use "make romgen" to generate
	 * the set of "pokes" to include, after the board has been configured.
	 * It is possible to override, or augment, the default set of
	 * options passed to the underlying "romgen" utility, please see the
	 * top-level files "mkromgen", and "romgen-wrapper", for details
	 * of the relevant make environment variables.
	 *
	 * host% make romgen [variable=value ...]
	 *
	 * This file may also be regenerated by executing the following
	 * command (redirecting the output), *without* needing any
	 * access to either a MicroConnect or a target board:
	 *
	 * host% romgen --show-comment dummy:b2020stxh415:st40,se=0
	 * or
	 * host% romgen --show-comment dummy:b2020stxh416:st40,se=0
	 * or
	 * host% romgen --show-comment dummy:b2020stxh415:a9_0
	 * or
	 * host% romgen --show-comment dummy:b2020stxh416:a9_0
	 *
	 * Where "dummy" need not correspond to any real IP address on
	 * your network.  In addition, note that "b2020stxh41x" should
	 * substituted if you have a custom target-pack connect command.
	 *
	 * It should be noted that the above commands explicitly
	 * include the option "se=0", which disables SE (or 32-bit)
	 * mode on ST40 cores. This is correct, even though you may be
	 * using 32-bit mode at run-time.  On the ST40 core, the "GDB
	 * pokes" are presently always executed in a 29-bit context,
	 * hence the need to disable 32-bit mode when running "romgen".
	 * This option should not be used if the ARM is the boot-master.
	 */
#if defined(CONFIG_STM_STXH415)
#	include "b2020-stxh415.romgen"
#elif defined(CONFIG_STM_STXH416)
#	include "b2020-stxh416.romgen"
#endif	/* CONFIG_STM_STXH415/CONFIG_STM_STXH416 */

	END_MARKER

__memory_setup_table_end:

	.end
